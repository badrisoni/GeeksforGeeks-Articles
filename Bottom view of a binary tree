#include <bits/stdc++.h> 
using namespace std; 
  
struct Node { 
    int data; 
    // left and right references 
    Node *left, *right; 
    // Constructor of tree Node 
    Node(int key) 
    { 
        data = key; 
        left = right = NULL; 
    } 
}; 
  
int l = 0, r = 0; 
int N; 
  
// Function to generate 
// bottom view of 
// binary tree 
void Bottom(Node* root, int arr[], int arr2[], int x, int p, int mid) 
{ 
    // Base case 
    if (root == NULL) { 
        return; 
    } 
  
    if (x < l) { 
        // To store leftmost 
        // value of x in l 
        l = x; 
    } 
  
    // To store rightmost 
    // value of x in r 
    if (x > r) { 
        r = x; 
    } 
  
    // To check if arr 
    // is empty at mid+x 
    if (arr[mid + x] == INT_MIN) { 
        // Insert data of Node 
        // at arr[mid+x] 
        arr[mid + x] = root->data; 
        // Insert priority of 
        // that Node at arr2[mid+x] 
        arr2[mid + x] = p; 
    } 
  
    // If not empty and priotiy 
    // of previously inserted 
    // Node is less than current*/ 
    else if (arr2[mid + x] < p) { 
        // Insert current 
        // Node data at arr[mid+x] 
        arr[mid + x] = root->data; 
  
        // Insert priotiy of 
        // that Node at arr2[mid +x] 
        arr2[mid + x] = p; 
    } 
  
    // Go right first 
    // then left 
    Bottom(root->right, arr, arr2, x + 1, p + 1, mid); 
    Bottom(root->left, arr, arr2, x - 1, p + 1, mid); 
} 
  
// Utility function 
// to generate bottom 
// view of a biany tree 
void bottomView(struct Node* root) 
{ 
    int arr[2 * N + 1]; 
    int arr2[2 * N + 1]; 
  
    for (int i = 0; i < 2 * N + 1; i++) { 
        arr[i] = INT_MIN; 
        arr2[i] = INT_MIN; 
    } 
  
    int mid = N, x = 0, p = 0; 
  
    Bottom(root, arr, arr2, x, p, mid); 
  
    for (int i = mid + l; i <= mid + r; i++) { 
        cout << arr[i] << " "; 
    } 
} 
  
// Driver code 
int main() 
{ 
  
    N = 5; 
    Node* root = new Node(1); 
    root->right = new Node(2); 
    root->right->right = new Node(4); 
    root->right->right->left = new Node(3); 
    root->right->right->right = new Node(5); 
  
    bottomView(root); 
  
    return 0; 
}
